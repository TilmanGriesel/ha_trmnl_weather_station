<!--
Home Assistant TRMNL Weather Station v0.6.0

- GitHub: https://github.com/TilmanGriesel/ha_trmnl_weather_station
- License: MIT License

Changelog:
- v0.6.0: Fixed TRMNL framework layout structure for proper label/value alignment
- v0.5.1: Weather integration improvements, dev tools enhancement, HACS release preparation
- v0.5.0: Added weather provider entity integration with weather icons in CO2 gauge section
- v0.4.0: Expanded sensor support (up to 6 sensors), configurable update rates, new sensor types, entity icon attributes
- v0.3.2: Updated TRMNL recipe setup instructions, refactored code into logic modules
- v0.3.1: Fixed label positioning above sensor values, enhanced font-weight for values, updated shared template with icon mapping
- v0.3.0: Initial release - First official version with basic weather station and CO₂ indicator functionality
-->

<style>
  .trmnl .view--half_vertical::before {
    background: none;
  }
  .sensor-value {
    font-weight: 600 !important;
  }
  .gauge-container {
    position: relative;
    display: inline-block;
  }
  .weather-icon {
    position: absolute;
    top: 68%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 50px;
  }
</style>
<div class="mashup mashup--1Lx1R">
  <div class="layout">
    <div class="gauge-container">
      <div id="co2-gauge"></div>
      {% assign weather_icon = '' %}
      {% for icon_pair in weather_icon_map %}
      {% assign icon_data = icon_pair | split: ':' %}
      {% if icon_data[0] == weather_code %}
      {% assign weather_icon = icon_data[1] %}
      {% break %}
      {% endif %}
      {% endfor %}
      <span class="weather-icon mdi {{ weather_icon }}"></span>
    </div>
  </div>
  <div class="layout">
    <div class="grid grid--cols-2">
      {% for entity in entities %}
      {% if entity.type != 'co2_primary' %}
      {% if entity.i and entity.i != blank %}
      {% assign entity_icon = entity.i | replace: ':', '-' %}
      {% else %}
      {% assign entity_icon = 'mdi-gauge' %}
      {% for icon_pair in icon_map %}
      {% assign icon_data = icon_pair | split: ':' %}
      {% if icon_data[0] == entity.device_class %}
      {% assign entity_icon = icon_data[1] %}
      {% break %}
      {% endif %}
      {% endfor %}
      {% endif %}
      <div class="item pb--8">
        <div class="content">
          <span class="label">
            <span class="mdi {{ entity_icon }}"></span>
            {{ entity.n }}
          </span>
          <span class="value value--tnums sensor-value" data-value-fit="true">
            {%- if entity.val == "unavailable" -%}
            -
            {%- else -%}
            {{- entity.val -}}{{- entity.u -}}
            {%- endif -%}
          </span>
        </div>
      </div>
      {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<script type="text/javascript">
  function createCO2Gauge(level, maxWidth) {
    Highcharts.chart('co2-gauge', {
      chart: {
        type: "gauge",
        width: maxWidth
      },
      title: {
        text: null
      },

      pane: {
        startAngle: -150,
        endAngle: 150,
        background: {
          backgroundColor: "transparent",
          borderWidth: 0
        }
      },
      plotOptions: {
        gauge: {
          animation: false,
          pivot: {
            backgroundColor: "transparent"
          },
          dial: {
            backgroundColor: "transparent",
            baseWidth: 0,
          },
        }
      },
      yAxis: {
        min: 400,
        max: 2000,
        minorTickInterval: 0,
        tickColor: "#ffffff",
        tickLength: 40,
        tickPixelInterval: 40,
        tickWidth: 0,
        tickPositions: [400, 800, 1200, 1600, 2000],
        lineWidth: 0,
        title: {
          text: null
        },
        title: {
          text: co2Rating(level),
          style: {
            color: "#000000",
            fontSize: "22px"
          }
        },
        labels: {
          distance: 24,
          style: {
            fontSize: "17px"
          }
        },
        plotBands: [
          {
            from: 400,
            to: 2000,
            color: {
              pattern: {
                image: "https://usetrmnl.com/images/grayscale/gray-5.png",
                width: 12,
                height: 12
              }
            },
            innerRadius: '82%',
            borderRadius: '50%'
          },
          {
            from: 400,
            to: level,
            color: '#000000',
            innerRadius: "82%",
            borderRadius: "50%"
          }
        ]
      },
      series: [{
        name: "CO₂",
        data: [level],
        dataLabels: {
          format: '{point.y} ppm',
          borderWidth: 0,
          style: {
            fontSize: "32px",
          },
          y: -20
        }
      }],
      credits: {
        enabled: false
      }
    });
  }

  createCO2Gauge({{ co2_value }}, 370);
</script>
